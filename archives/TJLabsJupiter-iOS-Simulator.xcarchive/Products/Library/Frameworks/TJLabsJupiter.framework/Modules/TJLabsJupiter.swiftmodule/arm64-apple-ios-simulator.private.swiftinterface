// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TJLabsJupiter
import Foundation
import Swift
import SystemConfiguration
import TJLabsCommon
@_exported import TJLabsJupiter
import TJLabsResource
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class JupiterNetworkConstants {
  public static func setServerURL(region: Swift.String)
  public static func getUserBaseURL() -> Swift.String
  public static func getRecBaseURL() -> Swift.String
  public static func getCalcBaseURL() -> Swift.String
  public static func getClientBaseURL() -> Swift.String
  public static func getUserLoginVersion() -> Swift.String
  public static func getRecRfdServerVersion() -> Swift.String
  public static func getRecUvdServerVersion() -> Swift.String
  public static func getUserLoginURL() -> Swift.String
  public static func getRecRfdURL() -> Swift.String
  public static func getRecUvdURL() -> Swift.String
  public static func getCalcFltURL() -> Swift.String
  public static func getCalcOsrURL() -> Swift.String
  public static func getClientBlacklistURL() -> Swift.String
  @objc deinit
}
public struct LoginInput : Swift.Codable {
  public var user_id: Swift.String
  public var device_model: Swift.String
  public var os_version: Swift.Int
  public var sdk_version: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FineLocationTrackingInput : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct MobileResult : Swift.Encodable {
  public var user_id: Swift.String
  public var mobile_time: Swift.Int
  public var sector_id: Swift.Int
  public var building_name: Swift.String
  public var level_name: Swift.String
  public var scc: Swift.Double
  public var x: Swift.Double
  public var y: Swift.Double
  public var absolute_heading: Swift.Double
  public var phase: Swift.Int
  public var calculated_time: Swift.Double
  public var index: Swift.Int
  public var velocity: Swift.Double
  public var ble_only_position: Swift.Bool
  public var normalization_scale: Swift.Double
  public var device_min_rss: Swift.Int
  public var sc_compensation: Swift.Double
  public var is_indoor: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct MobileReport : Swift.Encodable {
  public var user_id: Swift.String
  public var mobile_time: Swift.Int
  public var report: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct FineLocationTrackingOutput : Swift.Codable, Swift.Equatable {
  public var mobile_time: Swift.Int
  public var building_name: Swift.String
  public var level_name: Swift.String
  public var scc: Swift.Double
  public var x: Swift.Double
  public var y: Swift.Double
  public var absolute_heading: Swift.Double
  public var calculated_time: Swift.Double
  public var index: Swift.Int
  public var sc_compensation: Swift.Double
  public var node_number: Swift.Int
  public var search_direction: Swift.Int
  public var cumulative_length: Swift.Double
  public var channel_condition: Swift.Bool
  public init()
  public static func == (a: TJLabsJupiter.FineLocationTrackingOutput, b: TJLabsJupiter.FineLocationTrackingOutput) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FineLocationTrackingOutputList : Swift.Codable {
  public var flt_outputs: [TJLabsJupiter.FineLocationTrackingOutput]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OnSpotRecognitionOutput : Swift.Codable {
  public var mobile_time: Swift.Int
  public var building_name: Swift.String
  public var level_name: Swift.String
  public var linked_level_name: Swift.String
  public var spot_id: Swift.Int
  public var spot_distance: Swift.Double
  public var spot_range: [Swift.Int]
  public var spot_direction_down: [Swift.Int]
  public var spot_direction_up: [Swift.Int]
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RcInfo : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RcInfoOutputList : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BlackListDevices : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IOSSupport : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum JupiterRegion : Swift.String {
  case KOREA
  case US_EAST
  case CANADA
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct JupiterResult : Swift.Codable {
  public var mobile_time: Swift.Int
  public var building_name: Swift.String
  public var level_name: Swift.String
  public var scc: Swift.Double
  public var x: Swift.Double
  public var y: Swift.Double
  public var absolute_heading: Swift.Double
  public var phase: Swift.Int
  public var calculated_time: Swift.Double
  public var index: Swift.Int
  public var velocity: Swift.Double
  public var mode: TJLabsCommon.UserMode
  public var ble_only_position: Swift.Bool
  public var isIndoor: Swift.Bool
  public var validity: Swift.Bool
  public var validity_flag: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol JupiterManagerDelegate : AnyObject {
  func onJupiterSuccess(_ isSuccess: Swift.Bool)
  func onJupiterError(_ code: Swift.Int, _ msg: Swift.String)
  func onJupiterResult(_ result: TJLabsJupiter.JupiterResult)
}
public class JupiterManager {
  public static let sdkVersion: Swift.String
  weak public var delegate: (any TJLabsJupiter.JupiterManagerDelegate)?
  public init(id: Swift.String)
  public func startJupiter(region: Swift.String = JupiterRegion.KOREA.rawValue, sectorId: Swift.Int, mode: TJLabsCommon.UserMode)
  public func stopJupiter()
  public func setSimulationMode(flag: Swift.Bool, bleFileName: Swift.String, sensorFileName: Swift.String)
  public func checkServiceAvailableDevice(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func decodeBlackListDevices(from jsonString: Swift.String) -> TJLabsJupiter.BlackListDevices?
  @objc deinit
}
extension TJLabsJupiter.JupiterRegion : Swift.Equatable {}
extension TJLabsJupiter.JupiterRegion : Swift.Hashable {}
extension TJLabsJupiter.JupiterRegion : Swift.RawRepresentable {}
